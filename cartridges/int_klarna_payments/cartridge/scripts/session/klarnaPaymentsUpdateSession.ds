/**
* klarnaPaymentsUpdateSession.ds
*
* Klarna Uodate session API call 
*
* @input Basket : dw.order.Basket The basket
* @input session_id : String Klarna Session ID
* @output isSessionUpdated : Boolean true if klarna session has been updated
*/

// import packages
let SVC = require( 'dw/svc' );
let Net = require( 'dw/net' );
let Logger = require( 'dw/system/Logger' );

//script include
let log = Logger.getLogger( 'klarnaPaymentsUpdateSession.ds' );
let helpers = {
	klarnaPayments : require( '~/cartridge/scripts/util/klarnaPaymentsHelper' )(),	
};

function execute( args : PipelineDictionary ) : Number
{
	let service = null;
	let response = null;
	let endpointParam = {};
	let isSessionUpdated = false;

	// verify that we have a basket
	if( basket === null )	
	{
		log.error( 'Shopping Cart is empty' );
		return PIPELET_ERROR;
	}
	
	try
	{
		let requestDetails = helpers.klarnaPayments.generateSessionRequestDetails( args.Basket );
		log.debug( 'Create Session Request generated: {0}', JSON.stringify( requestDetails ) );
	}
	catch ( err )
	{
		log.error( 'Unable to generate create session request details. Error: {0}', err.message );
		return PIPELET_ERROR;
	}
	
	try
	{	
		service =  SVC.ServiceRegistry.get("KlarnaPaymentsCreateSessionService");
		endpointParam = {
			"url": requestDetails.url,
			"endpoint": 'credit/v1/sessions' + args.session_id,
			"payload": requestDetails.payload
		};
		response  = service.call( endpointParam );
	
		if ( response == null || service == null || response.error )
		{
		    log.error( "POST to {0} failed with error message: {1}", requestDetails.endpoint, response.errorMessage );
		    return PIPELET_ERROR;
		}
		isSessionUpdated = true;
		log.debug( 'Successfuly made a POST request {0}, response: {1}', JSON.stringify( requestDetails ), JSON.stringify( response ) );
	}
	catch(e)
	{
		log.error("Could not update session exception: {1}\nResponse: {2}", e.message, response.errorMessage);
		return PIPELET_ERROR;
	}
	
	args.isSessionUpdated = isSessionUpdated;

	return PIPELET_NEXT;
}

module.exports = {
	'execute': execute
}