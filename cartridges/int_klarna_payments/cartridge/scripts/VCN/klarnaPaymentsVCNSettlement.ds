/**
* klarnaPaymentsVCNSettlement.ds
*
* API call to create new Klarna Payments VCN settlement
*
* @input Order : dw.order.Order The SCC Order object
* @input klarnaPaymentsOrderID : String
*/

// import packages
var Logger = require( 'dw/system/Logger' );
var logger = Logger.getLogger( 'klarnaPaymentsVCNSettlement.ds' );
var Transaction = require( 'dw/system/Transaction' );
var KlarnaPayments = {
	httpService 			: require('int_klarna_payments/cartridge/scripts/common/KlarnaPaymentsHttpService.ds'),
	apiContext 				: require('int_klarna_payments/cartridge/scripts/common/KlarnaPaymentsApiContext')
};

function execute( args : PipelineDictionary ) : Number
{	
	try {
		var klarnaPaymentsHttpService = new KlarnaPayments.httpService();
        var klarnaApiContext = new KlarnaPayments.apiContext();
        var requestBody = {'order_id' : args.klarnaPaymentsOrderID};
        var requestUrl = klarnaApiContext.getFlowApiUrls().get('vcnSettlement');
        
		var response = klarnaPaymentsHttpService.call(requestUrl, 'POST', 'klarna.http.vcncredentials', requestBody);	
		if( empty(response.settlement_id) )
		{
			return PIPELET_ERROR;		
		}
		
		Transaction.wrap( function()
		{
			args.Order.custom.kpVCNBrand = response.cards[0].brand;
			args.Order.custom.kpVCNCSC = response.cards[0].csc;
			args.Order.custom.kpVCNExpirationMonth = response.cards[0].expiration_month;
			args.Order.custom.kpVCNExpirationYear = response.cards[0].expiration_year;
			args.Order.custom.kpVCNHolder = response.cards[0].holder;
			args.Order.custom.kpVCNPAN = response.cards[0].pan;	
			args.Order.custom.kpIsVCN = true;		
		} );
	} catch (e) {
		logger.error(e);
		return PIPELET_ERROR;
	}
    
    return PIPELET_NEXT;	
}