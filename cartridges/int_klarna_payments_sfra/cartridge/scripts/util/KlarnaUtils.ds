'use strict';

var Site = require('dw/system/Site');
var TaxMgr = require('dw/order/TaxMgr');
var collections = require('*/cartridge/scripts/util/collections');
var Transaction = require('dw/system/Transaction');
var KlarnaPaymentsConstants = require('~/cartridge/scripts/util/KlarnaPaymentsConstants.js');

function isCountryInEU( country ) {
    var isInEU = true;
    var EUCountries = "BE, BG, CZ, DK, DE, EE, IE, EL, ES, FR, HR, IT, CY, LV, LT, LU, HU, MT, NL, AT, PL, PT, RO, SI, SK, FI, SE, UK, GB";

    if ( EUCountries.indexOf( country ) === -1 ) {
        isInEU = false;
    }

    return isInEU;
}

function isEnabledPreassessmentForCountry( country ) {
    var isPreassessment = false;
    var preAssessmentCountries = Site.getCurrent().getCustomPreferenceValue( 'kpPreAssessment' );

    if ( !empty( preAssessmentCountries ) && ( preAssessmentCountries.indexOf( country ) !== -1 ) && !isCountryInEU( country ) ) {
        isPreassessment = true;
    }

    return isPreassessment;
}

function strval( obj ) {
    //  discuss at: http://locutus.io/php/strval/
    // original by: Brett Zamir (http://brett-zamir.me)
    // improved by: Kevin van Zonneveld (http://kvz.io)
    // bugfixed by: Brett Zamir (http://brett-zamir.me)
    //   example 1: this.strval({red: 1, green: 2, blue: 3, white: 4})
    //   returns 1: 'Object'

    if ( obj === null ) {
        return ''
    }

    return obj;
}

function stripControlCharacters(str) {
    return str.replace(/[^\x00-\x7F]/g, '');
}

function isTaxationPolicyNet() {
    return (TaxMgr.getTaxationPolicy() === TaxMgr.TAX_POLICY_NET);
};

function isKlarnaPaymentInstrument(paymentInstr) {
    var PAYMENT_METHOD = KlarnaPaymentsConstants.PAYMENT_METHOD;

    return (paymentInstr.getPaymentMethod() === PAYMENT_METHOD);
}

function removeAllKlarnaPaymentInstruments(basket) {
    var methodName = KlarnaPaymentsConstants.PAYMENT_METHOD;

    Transaction.wrap(function () {
        var paymentInstruments = basket.getPaymentInstruments(methodName);

        collections.forEach(paymentInstruments, function (item) {
            if (isKlarnaPaymentInstrument(item)) {
                basket.removePaymentInstrument(item);
            }
        });
    });
}

module.exports.isEnabledPreassessmentForCountry = isEnabledPreassessmentForCountry;
module.exports.stripControlCharacters = stripControlCharacters;
module.exports.isTaxationPolicyNet = isTaxationPolicyNet;
module.exports.removeAllKlarnaPaymentInstruments = removeAllKlarnaPaymentInstruments;
module.exports.strval = strval;
module.exports.empty = empty;