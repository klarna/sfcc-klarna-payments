/**
* klarnaPaymentsCreateSession.ds
*
* API call to create new Klarna Payments session
*
* @input Basket : dw.order.Basket The basket
* @input LocaleObject : dw.object.CustomObject
*/

// import packages
var Logger = require( 'dw/system/Logger' );
var Transaction = require('dw/system/Transaction');
var logger = Logger.getLogger( 'klarnaPaymentsCreateSession.ds' );
var KlarnaPayments = {
	httpService 			: require('int_klarna_payments/cartridge/scripts/common/KlarnaPaymentsHttpService.ds'),
	apiContext 				: require('int_klarna_payments/cartridge/scripts/common/KlarnaPaymentsApiContext'),
	sessionRequestBuilder 	: require('int_klarna_payments/cartridge/scripts/session/KlarnaPaymentsSessionRequestBuilder')
};

function execute( args : PipelineDictionary ) : Number
{
	var localeObject = args.LocaleObject;
	
	try {
		var klarnaPaymentsHttpService = new KlarnaPayments.httpService();
        var klarnaApiContext = new KlarnaPayments.apiContext();
        var requestBody = _getRequestBody(args.Basket, localeObject);
        var requestUrl = klarnaApiContext.getFlowApiUrls().get('createSession');
        
		var response = klarnaPaymentsHttpService.call(requestUrl, 'POST', localeObject.custom.credentialID, requestBody);

		Transaction.wrap( function()
		{
			session.privacy.KlarnaPaymentsSessionID = response.session_id;
			session.privacy.KlarnaPaymentsClientToken = response.client_token;
			session.privacy.KlarnaPaymentMethods = response.payment_method_categories ? response.payment_method_categories : null;
			session.privacy.SelectedKlarnaPaymentMethod = null;
		} );

	} catch (e) {
		logger.error(e);
		return PIPELET_ERROR;
	}
    
    return PIPELET_NEXT;	
}

function _getRequestBody(basket, localeObject) {
	var sessionRequestBuilder = new KlarnaPayments.sessionRequestBuilder();
	
	return sessionRequestBuilder.buildRequest({
	    basket: basket,
	    localeObject: localeObject
	}).get();
}