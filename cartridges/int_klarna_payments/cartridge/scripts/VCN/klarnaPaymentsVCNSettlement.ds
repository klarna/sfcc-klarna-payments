/**
* klarnaPaymentsVCNSettlement.ds
*
* API call to create new Klarna Payments VCN settlement
*
* @input Order : dw.order.Order The SCC Order object
* @input klarnaPaymentsOrderID : String
* @input LocaleObject : dw.object.CustomObject
*/

// import packages
var Logger = require( 'dw/system/Logger' );
var Site = require( 'dw/system/Site' );
var logger = Logger.getLogger( 'klarnaPaymentsVCNSettlement.ds' );
var Transaction = require( 'dw/system/Transaction' );
var StringUtils = require( 'dw/util/StringUtils' );
var KlarnaPayments = {
	httpService 			: require('*/cartridge/scripts/common/KlarnaPaymentsHttpService.ds'),
	apiContext 				: require('*/cartridge/scripts/common/KlarnaPaymentsApiContext')
};

function execute( args : PipelineDictionary ) : Number
{	
	var localeObject = args.LocaleObject;
	var klarnaPaymentsOrderID = args.klarnaPaymentsOrderID;

	try {
		var klarnaPaymentsHttpService = new KlarnaPayments.httpService();
		var klarnaApiContext = new KlarnaPayments.apiContext();
		var requestUrl = klarnaApiContext.getFlowApiUrls().get('vcnSettlement');
		var requestBody = {
			'order_id' : klarnaPaymentsOrderID,
			'key_id' : Site.getCurrent().getCustomPreferenceValue( 'kpVCNkeyId' )
		};

		var response = klarnaPaymentsHttpService.call(requestUrl, 'POST', localeObject.custom.credentialID, requestBody);
		if( empty(response.settlement_id) || empty( response.cards ))
		{
			return PIPELET_ERROR;
		}
	} catch (e) {
		logger.error(e);
		return PIPELET_ERROR;
	}

	try {
		Transaction.wrap( function()
		{
			args.Order.custom.kpVCNBrand = response.cards[0].brand;
			args.Order.custom.kpVCNHolder = response.cards[0].holder;
			args.Order.custom.kpVCNCardID = response.cards[0].card_id;
			args.Order.custom.kpVCNPCIData = response.cards[0].pci_data;
			args.Order.custom.kpVCNIV = response.cards[0].iv;
			args.Order.custom.kpVCNAESKey = response.cards[0].aes_key;
			args.Order.custom.kpIsVCN = true;
		} );
	} catch (e) {
		logger.error(e);
		return PIPELET_ERROR;
	}

	return PIPELET_NEXT;
}