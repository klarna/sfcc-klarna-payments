/**
* klarnaPaymentsVCNSettlement.ds
*
* API call to create new Klarna Payments VCN settlement
*
* @input Order : dw.order.Order The SCC Order object
* @input klarnaPaymentsOrderID : String
* @input LocaleObject : dw.object.CustomObject
*/

// import packages
var Logger = require( 'dw/system/Logger' );
var Site = require( 'dw/system/Site' );
var Cypher = require( 'dw/crypto/Cipher' );
var logger = Logger.getLogger( 'klarnaPaymentsVCNSettlement.ds' );
var Transaction = require( 'dw/system/Transaction' );
var KlarnaPayments = {
	httpService 			: require('*/cartridge/scripts/common/KlarnaPaymentsHttpService.ds'),
	apiContext 				: require('*/cartridge/scripts/common/KlarnaPaymentsApiContext')
};

function execute( args : PipelineDictionary ) : Number
{	
	var localeObject = args.LocaleObject;
	try {
		var klarnaPaymentsHttpService = new KlarnaPayments.httpService();
        var klarnaApiContext = new KlarnaPayments.apiContext();
        var requestBody = {'order_id' : args.klarnaPaymentsOrderID};
        var requestUrl = klarnaApiContext.getFlowApiUrls().get('vcnSettlement');
        
		var response = klarnaPaymentsHttpService.call(requestUrl, 'POST', localeObject.custom.credentialID, requestBody);	
		if( empty(response.settlement_id) )
		{
			return PIPELET_ERROR;		
		}
	} catch (e) {
		logger.error(e);
		return PIPELET_ERROR;
	}
	try {
		//Decrypt PAN and CSC
		var VCNPrivateKey = Site.getCurrent().getCustomPreferenceValue( 'vcnPrivateKey' );
		var cypher = new Cypher();
		
		var panEncrypted = response.cards[0].pan;
		var cscEncrypted = response.cards[0].csc;
		
		//mocking pan and csc for debug purposes
		//var panEncrypted = 'U50dpsYfr29a+kZta2A9pYdAPYvp1GnUYEt7BwFF2vWcD+31EHhzUuKHNnns61NQ+pjayXjHMll1v3lNLDehhAVj5/OuJCmAgk20Wx1SI/RYLtK5wA9Iv7ZOnGdwXOseTTUcXCgY1fjpBWtpqlgsBgqobZhaX3Q0KaBk89qwT2o21/Yo5HKiafxnZSAQ0x2lG5GBkRjy/UC/9nfkeCNZATxADQG2L3FnHrqXq/F6CLUmsxPIawWO5wmpYToa4/4UhAuQS/L/3lmvXoBd68gNSQsWSs+gjrNxMejmR5HJvzuwUj+htLZxvGds+FRSFFABZfbU+z1b9HjbzdxdkD55jtVHoWA1diTiFODSguScertk0oCwAFz6AKFC4P7NedfDuko3QFew2ab3CFO76DYQYXDE18itNHAG/PgpkYttS7sS1n1EJMBGh+18BbOmOutyuuAq0z7j3tiUfLl0aXCMs76VeoawGBKQhIY2k6fUTlaRjolSAwcwZbZV7dZZq5TcwIVzhiIBOtz/v3y0AhnEUua5kOeM6r1ulPqdPv2vHRIPPDHwQ6051GB68QpVnIRnvR63UVOqogsXyBduO281MNbXWRlO7c1UbjI3UlJiM0AVsZgZ0uWQxhbF+Xu48dkjhcjvbA4oi79RRtw4UfDHyEOOSX2zaOf/D5KY1GUPwAw=';
		//var cscEncrypted = 'P/jEMDJszBNpVdwNN/OCBHW+yuF3WcXGhX/vwVFjeGjp/YohO//6pHm9ggtY0m6inTzvfA849VZlJxeq8QVpo1p8dUUvC6L6CvmUEC8kUZBU77TkNChJCvzaGYr74pjsntu65A3nipraGCoCkAdYagtrJBZ0gl6jrv8jq2f+OfuH+YZoX0HMqvSh0v1+M+7sHLhxVDPs7Daqn8v6qyuZEajMYk4AZI4uKAu/X3TJTItC4hXa/epGIPDivyQ/EwDMK27P/I8rfw0bY6zxMw2+fYWlVjXbrUtl7Z/WiiUNC3cayrZtysAphD3RLt9re6dC6h1AzCIWBFZxHKCJB1MihDqgALOeLS6B4rxqljbb3bfWAkK6nkbnSEHwlvh628eNyIS9Ga/YWlriy4Z7kcCH7VuFcfKskGiDUE1qozeOmq58dMj6DRwsjgCshnWfd/HXcIdYuvEb0wn/mMygZa7MG2V7Sd2ROLtNpn6JhR0WScgJcwNWVN7sfhmElGy8bcmDYArusU0mDTUfamPmhVeRTbdiWE8xEqSqmIStUoPe1BvxHeKs+Gdw6iQKsxruwOJb+Tz5zzyfbsrVDp3wxsa3nb9nSJOZGTmi3ie7y02a/KuLGsypsIXZR2P1Jjofuh4mvT1nu4W2VJKNG9IuhxIAh8adCCxbZ0Cn70+8P3p42S4=';
		
		var panDecrypted = cypher.decrypt(panEncrypted, VCNPrivateKey, "RSA/ECB/PKCS1PADDING", null, 0);
		var cscDecrypted = cypher.decrypt(cscEncrypted, VCNPrivateKey, "RSA/ECB/PKCS1PADDING", null, 0);
		
		Transaction.wrap( function()
		{
			args.Order.custom.kpVCNBrand = response.cards[0].brand;
			args.Order.custom.kpVCNCSC = cscDecrypted;
			args.Order.custom.kpVCNExpirationMonth = response.cards[0].expiration_month;
			args.Order.custom.kpVCNExpirationYear = response.cards[0].expiration_year;
			args.Order.custom.kpVCNHolder = response.cards[0].holder;
			args.Order.custom.kpVCNPAN = panDecrypted;	
			args.Order.custom.kpIsVCN = true;		
		} );
	} catch (e) {
		logger.error(e);
		return PIPELET_ERROR;
	}
    
    return PIPELET_NEXT;	
}